# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H99ii25NbFo4FFAVQpT73J0gwhneScGN
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, classification_report
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
# Replace 'path_to_file/cardio_train.csv' with the actual file path after uploading it to Colab
file_path = "cardio_train.csv"
data = pd.read_csv(file_path, sep=';')  # Dataset uses ';' as delimiter

# Preview the dataset
print("Dataset Preview:")
print(data.head())

# Data Cleaning and Feature Engineering
# Convert age from days to years
data['AgeYears'] = data['age'] / 365
data['AgeGroup'] = pd.cut(data['AgeYears'], bins=[10, 20, 30, 40, 50, 60, 70, np.inf],
                          labels=['10-20', '21-30', '31-40', '41-50', '51-60', '61-70', '70+'])

# Map gender to readable format
data['Gender'] = data['gender'].map({1: 'Male', 2: 'Female'})

# Target variable
data['HeartIssue'] = data['cardio']  # 1 = Has disease, 0 = No disease

# Summary of males and females in the dataset
gender_counts = data['Gender'].value_counts()
print("\nNumber of Males and Females in the Dataset:")
print(gender_counts)

# Summary by age group
age_group_counts = data.groupby('AgeGroup')['HeartIssue'].agg(['count', 'sum']).reset_index()
age_group_counts.rename(columns={'count': 'TotalExamined', 'sum': 'WithHeartIssue'}, inplace=True)
age_group_counts['Percentage'] = (age_group_counts['WithHeartIssue'] / age_group_counts['TotalExamined']) * 100
print("\nAge Group Analysis:")
print(age_group_counts)

# Summary by gender with heart conditions
gender_heart_conditions = data.groupby('Gender')['HeartIssue'].sum()
print("\nNumber of Males and Females with Heart Conditions:")
print(gender_heart_conditions)

# Prepare data for model training
features = data[['AgeYears', 'Gender', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc']]  # Relevant features
features['Gender'] = LabelEncoder().fit_transform(features['Gender'])  # Encode Gender
target = data['HeartIssue']

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Logistic Regression Model
model = LogisticRegression(max_iter=1000, random_state=42)
model.fit(X_train, y_train)

# Predictions and Evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)

print("\nModel Performance:")
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Visualization: Heart Conditions by Age Group
plt.figure(figsize=(10, 6))
sns.barplot(data=age_group_counts, x='AgeGroup', y='Percentage', color='blue')
plt.title('Percentage of Heart Conditions by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Percentage')
plt.show()